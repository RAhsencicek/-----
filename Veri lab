{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNBBHx/nOtD+gAU6cO8M8If",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/RAhsencicek/-----/blob/main/Veri%20lab\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "bsqzmqArSXNf",
        "outputId": "4ccd6626-9208-43f9-97be-dc3eaccdc1f0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n",
            "Veri seti başarıyla yüklendi:\n",
            "   Country   Age        Salary Purchased\n",
            "0   France  44.0  72000.000000        No\n",
            "1    Spain  27.0  48000.000000       Yes\n",
            "2  Germany  30.0  54000.000000        No\n",
            "3    Spain  38.0  61000.000000        No\n",
            "4  Germany  40.0  63777.777778       Yes\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Eğitim seti boyutu: (8, 3)\n",
            "Test seti boyutu: (2, 3)\n"
          ]
        }
      ],
      "source": [
        "# Gerekli kütüphanelerin yüklenmesi\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
        "\n",
        "# Veri setini oluşturma (Sizin sağladığınız tablo verileri)\n",
        "data = {\n",
        "    'Country': ['France', 'Spain', 'Germany', 'Spain', 'Germany', 'France', 'Spain', 'France', 'Germany', 'France'],\n",
        "    'Age': [44.0, 27.0, 30.0, 38.0, 40.0, 35.0, 38.7777778, 48.0, 50.0, 37.0],\n",
        "    'Salary': [72000.0, 48000.0, 54000.0, 61000.0, 63777.7777778, 58000.0, 52000.0, 79000.0, 83000.0, 67000.0],\n",
        "    'Purchased': ['No', 'Yes', 'No', 'No', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes']\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# DataFrame'i CSV dosyasına kaydetme\n",
        "df.to_csv('dataset.csv', index=False)  # CSV dosyasını kaydet [[3]]\n",
        "\n",
        "# Google Drive'ı bağlama\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# CSV dosyasını Google Drive'a yükleme\n",
        "!cp dataset.csv /content/drive/MyDrive/  # Dosyayı Google Drive'a taşıma [[4]]\n",
        "\n",
        "# CSV dosyasını okuma\n",
        "data = pd.read_csv('/content/drive/MyDrive/dataset.csv')  # Dosya yolunu kontrol etme [[1]]\n",
        "print(\"Veri seti başarıyla yüklendi:\")\n",
        "print(data.head())\n",
        "\n",
        "# Eksik değerlerin işlenmesi\n",
        "imputer = SimpleImputer(strategy='mean')\n",
        "data['Age'] = imputer.fit_transform(data[['Age']])  # 'Age' sütunundaki eksik değerleri doldurma\n",
        "data['Salary'] = imputer.fit_transform(data[['Salary']])  # 'Salary' sütunundaki eksik değerleri doldurma\n",
        "\n",
        "# Aykırı değerlerin tespiti\n",
        "plt.figure(figsize=(10, 5))\n",
        "sns.boxplot(data['Age'])\n",
        "plt.title(\"Age Sütunu İçin Aykırı Değer Tespiti\")\n",
        "plt.show()\n",
        "\n",
        "# Kategorik değişkenlerin dönüştürülmesi\n",
        "label_encoder = LabelEncoder()\n",
        "data['Country'] = label_encoder.fit_transform(data['Country'])  # 'Country' sütununu sayısal değerlere dönüştürme\n",
        "data['Purchased'] = label_encoder.fit_transform(data['Purchased'])  # 'Purchased' sütununu sayısal değerlere dönüştürme\n",
        "\n",
        "# Özellik ölçeklendirme\n",
        "scaler = StandardScaler()\n",
        "data['Age'] = scaler.fit_transform(data[['Age']])  # 'Age' sütununu ölçeklendirme\n",
        "data['Salary'] = scaler.fit_transform(data[['Salary']])  # 'Salary' sütununu ölçeklendirme\n",
        "\n",
        "# Veri setini eğitim ve test olarak bölme\n",
        "X = data.drop('Purchased', axis=1)  # Hedef değişken hariç tüm özellikleri seçme\n",
        "y = data['Purchased']  # Hedef değişken\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Sonuçları kontrol etme\n",
        "print(\"Eğitim seti boyutu:\", X_train.shape)\n",
        "print(\"Test seti boyutu:\", X_test.shape)"
      ]
    }
  ]
}